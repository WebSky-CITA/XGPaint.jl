var documenterSearchIndex = {"docs":
[{"location":"cib/#Cosmic-Infrared-Background-(CIB)","page":"CIB","title":"Cosmic Infrared Background (CIB)","text":"","category":"section"},{"location":"cib/","page":"CIB","title":"CIB","text":"The Planck 2013 CIB model can be applied using CIB_Planck2013{T}(). The following code is a little more verbose than typical Julia code, as one has to repeatedly specify the type Float32 when creating objects. This allows one to more easily fit the entire source catalog into memory.","category":"page"},{"location":"cib/#Sources","page":"CIB","title":"Sources","text":"","category":"section"},{"location":"cib/","page":"CIB","title":"CIB","text":"One first loads the halo positions and masses into memory. This package takes halo positions in the shape (3 N_mathrmhalos), where the first dimension is the Cartesian coordinates x y z.","category":"page"},{"location":"cib/","page":"CIB","title":"CIB","text":"using XGPaint\nusing Healpix\n\n## Load halos from HDF5 files, establish a CIB model and cosmology\nwebsky_directory = \"/global/cfs/cdirs/sobs/www/users/Radio_WebSky\"\nhalo_pos, halo_mass = read_halo_catalog_hdf5(\n    \"$(websky_directory)/websky_halos-light.hdf5\")","category":"page"},{"location":"cib/","page":"CIB","title":"CIB","text":"Now one specifes the background cosmology and the source model.","category":"page"},{"location":"cib/","page":"CIB","title":"CIB","text":"# configuration objects\ncosmo = get_cosmology(Float32; h=0.7, OmegaM=0.25)\nmodel = CIB_Planck2013{Float32}()\n\n# generate sources (healpix pixel, luminosities, etc. \n@time sources = generate_sources(model, cosmo, halo_pos, halo_mass);","category":"page"},{"location":"cib/","page":"CIB","title":"CIB","text":"This sources is a NamedTuple with arrays for centrals,","category":"page"},{"location":"cib/","page":"CIB","title":"CIB","text":"hp_ind_cen: healpix index of the central\nlum_cen: luminosity of the central\nredshift_cen: redshift of the central\ndist_cen: distance to the central","category":"page"},{"location":"cib/","page":"CIB","title":"CIB","text":"There are additionally arrays for the satellites,","category":"page"},{"location":"cib/","page":"CIB","title":"CIB","text":"hp_ind_sat: healpix index of the satellite\nlum_sat: luminosity of the satellite\nredshift_sat: redshift of the satellite\ndist_sat: distance to the satellite","category":"page"},{"location":"cib/","page":"CIB","title":"CIB","text":"There are also two integers in sources  for the total number of centrals N_cen and total number of satellites N_sat.","category":"page"},{"location":"cib/#Map-making","page":"CIB","title":"Map-making","text":"","category":"section"},{"location":"cib/","page":"CIB","title":"CIB","text":"Once these sources are generated, one needs to create some buffer arrays for map-making. The fluxes of the centrals and satellites are deposited into these arrays, before the map is generated.","category":"page"},{"location":"cib/","page":"CIB","title":"CIB","text":"# Create some empty arrays for the fluxes to be deposited\nfluxes_cen = Array{Float32, 1}(undef, sources.N_cen)\nfluxes_sat = Array{Float32, 1}(undef, sources.N_sat)\nm = Map{Float64,RingOrder}(model.nside)  # create a Healpix map","category":"page"},{"location":"cib/","page":"CIB","title":"CIB","text":"These arrays are used by paint! to create maps. We then save those to disk. We add a time macro to get some info on how long it takes. Note that with NERSC's notoriously slow filesystem, writing to disk can take as long as generating the maps!","category":"page"},{"location":"cib/","page":"CIB","title":"CIB","text":"for freq in [\"100\", \"143\", \"217\" \"353\", \"545\"]\n    @time paint!(m, parse(Float32, freq) * 1.0f9, model, \n        sources, fluxes_cen, fluxes_sat)\n    saveToFITS(m, \"!/global/cscratch1/sd/xzackli/cib/cib$(freq).fits\")\nend","category":"page"},{"location":"api/","page":"Index","title":"Index","text":"","category":"page"},{"location":"api/","page":"Index","title":"Index","text":"Modules = [XGPaint]","category":"page"},{"location":"api/#XGPaint.AbstractForegroundModel","page":"Index","title":"XGPaint.AbstractForegroundModel","text":"All foreground models inherit from this type.\n\n\n\n\n\n","category":"type"},{"location":"api/#XGPaint.CIB_Planck2013","page":"Index","title":"XGPaint.CIB_Planck2013","text":"CIB_Planck2013{T}(model parameters...)\n\nDefine CIB model parameters. Defaults are from Viero et al. 2013.\n\nmodel = CIB_Planck2013{Float32}(shang_Mpeak=10^12.4)\n\n\n\n\n\n","category":"type"},{"location":"api/#XGPaint.Enmap","page":"Index","title":"XGPaint.Enmap","text":"Map type, contains an AbstractArray and a WCS object, but behaves like the AbstractArray it contains for array operations.\n\nIt only implements the subset of Base.Array operations which are common on maps. You should work with the data directly using enmap_instance.data if you need additional Array functions.\n\n\n\n\n\n","category":"type"},{"location":"api/#XGPaint.Radio_Sehgal2009","page":"Index","title":"XGPaint.Radio_Sehgal2009","text":"Radio_Sehgal2009{T}(model parameters...)\n\nDefine CIB model parameters. Defaults are from Viero et al. 2013.\n\nmodel = CIBModel{Float32}(a_0=0.4)\n\n\n\n\n\n","category":"type"},{"location":"api/#XGPaint.build_c_lnm2r_interpolator-Union{Tuple{}, Tuple{T}} where T","page":"Index","title":"XGPaint.build_c_lnm2r_interpolator","text":"Generates an interpolator r(c, lnm)\n\nGenerate a LinearInterpolation object that turns concentration and ln(M_halo) into satellite radius.\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.build_r2z_interpolator-Union{Tuple{T}, Tuple{T, T, Cosmology.AbstractCosmology}} where T","page":"Index","title":"XGPaint.build_r2z_interpolator","text":"Construct a fast r2z linear interpolator.\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.build_shang_interpolator-Union{Tuple{T}, Tuple{T, T, XGPaint.AbstractCIBModel}} where T","page":"Index","title":"XGPaint.build_shang_interpolator","text":"Build a linear interpolation function which maps log(Mh) to Nsat.\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.build_sigma_sat_ln_interpolator-Union{Tuple{T}, Tuple{T, XGPaint.AbstractCIBModel}} where T","page":"Index","title":"XGPaint.build_sigma_sat_ln_interpolator","text":"Build a linear interpolator that takes in ln(M_halo) and returns sigma.\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.chunk-Tuple{Any, Integer}","page":"Index","title":"XGPaint.chunk","text":"Generates a list of tuples which describe starting and ending chunk indices. Useful for parallelizing an array operation.\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.ellpad-Union{Tuple{Array{T, N}}, Tuple{N}, Tuple{T}} where {T, N}","page":"Index","title":"XGPaint.ellpad","text":"Utility function which prepends some zeros to an array. It makes a copy instead of modifying the input.\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.enfft!-Union{Tuple{XGPaint.Enmap{T, N, AA}}, Tuple{AA}, Tuple{N}, Tuple{T}} where {T, N, AA}","page":"Index","title":"XGPaint.enfft!","text":"Physically normalized enmap FFT\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.enifft!-Union{Tuple{XGPaint.Enmap{T, N, AA}}, Tuple{AA}, Tuple{N}, Tuple{T}} where {T, N, AA}","page":"Index","title":"XGPaint.enifft!","text":"Physically normalized enmap inverse FFT\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.generate_sources-Union{Tuple{TH}, Tuple{T}, Tuple{XGPaint.AbstractCIBModel{T}, Cosmology.FlatLCDM{T}, AbstractMatrix{TH}, AbstractVector{TH}}} where {T, TH}","page":"Index","title":"XGPaint.generate_sources","text":"Produce a source catalog from a model and halo catalog.\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.generate_sources-Union{Tuple{TH}, Tuple{T}, Tuple{XGPaint.AbstractRadioModel{T}, Cosmology.FlatLCDM{T}, AbstractMatrix{TH}, AbstractVector{TH}}} where {T, TH}","page":"Index","title":"XGPaint.generate_sources","text":"Produce a source catalog from a model and halo catalog.\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.generate_subhalo_offsets-Tuple{Any}","page":"Index","title":"XGPaint.generate_subhalo_offsets","text":"Generate an array where the value at index i corresponds to the index of the first source of halo i. Takes an array where the value at index i corresponds to the number of subhalos that halo i has.\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.get_angles-Union{Tuple{Matrix{T}}, Tuple{T}} where T","page":"Index","title":"XGPaint.get_angles","text":"Compute angles of halos\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.get_basic_halo_properties-Union{Tuple{T}, Tuple{Matrix{T}, XGPaint.AbstractForegroundModel, Cosmology.FlatLCDM{T}, Healpix.Resolution}} where T","page":"Index","title":"XGPaint.get_basic_halo_properties","text":"Fill in basic halo properties.\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.get_cosmology-Union{Tuple{Type{T}}, Tuple{T}} where T","page":"Index","title":"XGPaint.get_cosmology","text":"Construct a background cosmology.\n\nThis function duplicates the cosmology() function in Cosmology.jl, but with typing. The type of the cosmology will the type of h and OmegaM. This is primarily for keeping the code entirely in Float32 or Float64.\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.get_interpolators-Union{Tuple{T}, Tuple{XGPaint.AbstractCIBModel, Cosmology.FlatLCDM{T}, T, T}} where T","page":"Index","title":"XGPaint.get_interpolators","text":"Construct the necessary interpolator set.\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.hod_sehgal-Union{Tuple{T}, Tuple{Any, Any, Radio_Sehgal2009{T}}} where T","page":"Index","title":"XGPaint.hod_sehgal","text":"Populate halos with radio sources according to the HOD in Sehgal et al. 2009.\n\nThe optional rng parameter provides an array of random number generators, one for each thread.\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.integrand_L-Tuple{Any, Any, XGPaint.AbstractCIBModel}","page":"Index","title":"XGPaint.integrand_L","text":"<L_sat> interpolation values\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.l2f-Union{Tuple{T}, Tuple{T, T, T}} where T","page":"Index","title":"XGPaint.l2f","text":"Inverse square law with redshift dependence.\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.m2r-Union{Tuple{T}, Tuple{T, Cosmology.FlatLCDM{T}}} where T","page":"Index","title":"XGPaint.m2r","text":"Convert virial mass to virial radius.\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.mz2c-Union{Tuple{T}, Tuple{T, T, Cosmology.FlatLCDM{T}}} where T","page":"Index","title":"XGPaint.mz2c","text":"Compute concentration factor from Duffy et al. 2008.\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.paint!-Union{Tuple{T}, Tuple{Healpix.Map{T, Healpix.RingOrder, AA} where AA<:AbstractVector{T}, T, XGPaint.AbstractCIBModel, Any}} where T","page":"Index","title":"XGPaint.paint!","text":"Paint a source catalog onto a map.\n\nThis function creates the arrays for you.\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.paint!-Union{Tuple{T}, Tuple{T_map}, Tuple{Healpix.Map{T_map, Healpix.RingOrder, AA} where AA<:AbstractVector{T_map}, T, XGPaint.AbstractCIBModel, Any, AbstractArray, AbstractArray}} where {T_map, T}","page":"Index","title":"XGPaint.paint!","text":"Paint a source catalog onto a map, recording the fluxes.\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.process_centrals!-Union{Tuple{T}, Tuple{XGPaint.AbstractCIBModel{T}, Cosmology.FlatLCDM{T}, Healpix.Resolution}} where T","page":"Index","title":"XGPaint.process_centrals!","text":"Fill up arrays with information related to CIB central sources.\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.process_sats!-Union{Tuple{T}, Tuple{XGPaint.AbstractCIBModel{T}, Cosmology.FlatLCDM{T}, Healpix.Resolution}} where T","page":"Index","title":"XGPaint.process_sats!","text":"Fill up arrays with information related to CIB satellites.\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.read_halo_catalog_hdf5-Tuple{Any}","page":"Index","title":"XGPaint.read_halo_catalog_hdf5","text":"Utility function to read an HDF5 table with x, y, z, M_h as the four rows. The hdf5 record is \"halos\".\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.sehgal_LF!-Union{Tuple{T}, Tuple{Vector{T}, Any, Any, T, Any, Vector{T}}} where T","page":"Index","title":"XGPaint.sehgal_LF!","text":"Fills the result array with draws from the luminosity function.\n\n\n\n\n\n","category":"method"},{"location":"api/#XGPaint.shang_z_evo-Union{Tuple{T}, Tuple{T, XGPaint.AbstractCIBModel}} where T","page":"Index","title":"XGPaint.shang_z_evo","text":"Compute redshift evolution factor for LF.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = XGPaint","category":"page"},{"location":"#XGPaint","page":"Home","title":"XGPaint","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"XGPaint paints maps of extragalactic foregrounds using halo models. We provide CIB and radio models.","category":"page"}]
}
