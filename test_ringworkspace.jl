using XGPaint
using XGPaint: RingWorkspace
using Healpix
using Printf
using Test

"""
Brute-force reference implementation that loops over all pixels
"""
function profile_paint_bruteforce!(m::HealpixMap{T, RingOrder}, model, Mh, z, Œ±‚ÇÄ, Œ¥‚ÇÄ, Œ∏max, normalization=1) where T
    œï‚ÇÄ = Œ±‚ÇÄ  
    Œ∏‚ÇÄ = T(œÄ)/2 - Œ¥‚ÇÄ
    x‚ÇÄ, y‚ÇÄ, z‚ÇÄ = ang2vec(Œ∏‚ÇÄ, œï‚ÇÄ)
    Œ∏min = XGPaint.compute_Œ∏min(model)
    
    # Brute force: check every pixel in the map
    for global_pix in 1:length(m.pixels)
        # Get position of this pixel
        x‚ÇÅ, y‚ÇÅ, z‚ÇÅ = pix2vecRing(m.resolution, global_pix)
        
        # Compute angular distance
        d¬≤ = (x‚ÇÅ - x‚ÇÄ)^2 + (y‚ÇÅ - y‚ÇÄ)^2 + (z‚ÇÅ - z‚ÇÄ)^2
        Œ∏ = acos(clamp(1 - d¬≤ / 2, -one(T), one(T)))
        Œ∏ = max(Œ∏min, Œ∏)  # clamp to minimum Œ∏
        
        # Add contribution to map
        m.pixels[global_pix] += ifelse(Œ∏ < Œ∏max,
                                      normalization * model(Œ∏, Mh, z),
                                      zero(T))
    end
end

"""
Simple test model that returns a constant value for testing
"""
struct TestModel{T} <: XGPaint.AbstractProfile{T}
    value::T
end

(m::TestModel)(Œ∏, Mh, z) = m.value
XGPaint.compute_Œ∏min(::TestModel{T}) where T = eps(T)

"""
Test the RingWorkspace implementation against brute force
"""
function test_ringworkspace_vs_bruteforce()
    @printf "Testing RingWorkspace vs brute force implementation...\n"
    
    # Setup
    nside = 64
    res = Healpix.Resolution(nside)
    workspace = RingWorkspace(res)
    
    # Create test maps
    map_ringworkspace = HealpixMap{Float64, RingOrder}(zeros(Float64, nside2npix(nside)))
    map_bruteforce = HealpixMap{Float64, RingOrder}(zeros(Float64, nside2npix(nside)))
    
    # Test model
    model = TestModel(1.0)
    
    # Test parameters
    test_cases = [
        (Œ±‚ÇÄ=0.0, Œ¥‚ÇÄ=0.0, Œ∏max=0.1, Mh=1e14, z=0.5),           # North pole
        (Œ±‚ÇÄ=3.14159, Œ¥‚ÇÄ=0.0, Œ∏max=0.1, Mh=1e14, z=0.5),       # South pole  
        (Œ±‚ÇÄ=1.5708, Œ¥‚ÇÄ=0.7854, Œ∏max=0.2, Mh=1e14, z=0.3),     # Equatorial
        (Œ±‚ÇÄ=4.7124, Œ¥‚ÇÄ=-0.7854, Œ∏max=0.15, Mh=1e13, z=0.7),   # Southern hemisphere
        (Œ±‚ÇÄ=0.1, Œ¥‚ÇÄ=0.05, Œ∏max=0.05, Mh=5e13, z=1.0),         # Small disc
        (Œ±‚ÇÄ=6.1832, Œ¥‚ÇÄ=0.0, Œ∏max=0.3, Mh=2e14, z=0.1),        # Near RA=0 wrap
    ]
    
    all_passed = true
    
    for (i, test_case) in enumerate(test_cases)
        @printf "Test case %d: Œ±‚ÇÄ=%.3f, Œ¥‚ÇÄ=%.3f, Œ∏max=%.3f\n" i test_case.Œ±‚ÇÄ test_case.Œ¥‚ÇÄ test_case.Œ∏max
        
        # Reset maps
        fill!(map_ringworkspace.pixels, 0.0)
        fill!(map_bruteforce.pixels, 0.0)
        
        # Paint with both methods
        XGPaint.profile_paint_generic!(map_ringworkspace, workspace, model, 
                                     test_case.Mh, test_case.z, test_case.Œ±‚ÇÄ, test_case.Œ¥‚ÇÄ, test_case.Œ∏max)
        
        profile_paint_bruteforce!(map_bruteforce, model, 
                                test_case.Mh, test_case.z, test_case.Œ±‚ÇÄ, test_case.Œ¥‚ÇÄ, test_case.Œ∏max)
        
        # Compare results
        diff = map_ringworkspace.pixels .- map_bruteforce.pixels
        max_diff = maximum(abs.(diff))
        nonzero_ringworkspace = count(x -> x != 0, map_ringworkspace.pixels)
        nonzero_bruteforce = count(x -> x != 0, map_bruteforce.pixels)
        
        @printf "  Nonzero pixels: RingWorkspace=%d, BruteForce=%d\n" nonzero_ringworkspace nonzero_bruteforce
        @printf "  Max difference: %.2e\n" max_diff
        
        # Check if results are identical (should be exactly equal for constant model)
        if max_diff > 1e-14 || nonzero_ringworkspace != nonzero_bruteforce
            @printf "  ‚ùå FAILED: Results differ!\n"
            
            # Print some details about the differences
            nonzero_diff_count = count(x -> abs(x) > 1e-14, diff)
            @printf "  Pixels with significant differences: %d\n" nonzero_diff_count
            
            if nonzero_diff_count > 0 && nonzero_diff_count < 20
                for (idx, d) in enumerate(diff)
                    if abs(d) > 1e-14
                        @printf "    Pixel %d: RingWorkspace=%.6f, BruteForce=%.6f, diff=%.2e\n" idx map_ringworkspace.pixels[idx] map_bruteforce.pixels[idx] d
                    end
                end
            end
            
            all_passed = false
        else
            @printf "  ‚úÖ PASSED\n"
        end
        
        @printf "\n"
    end
    
    return all_passed
end

"""
Test edge cases and boundary conditions
"""
function test_edge_cases()
    @printf "Testing edge cases...\n"
    
    nside = 64
    res = Healpix.Resolution(nside)
    workspace = RingWorkspace(res)
    
    map_test = HealpixMap{Float64, RingOrder}(zeros(Float64, nside2npix(nside)))
    model = TestModel(1.0)
    
    edge_cases = [
        (Œ±‚ÇÄ=0.0, Œ¥‚ÇÄ=1.5708-0.01, Œ∏max=0.1, name="Close to north pole"),
        (Œ±‚ÇÄ=0.0, Œ¥‚ÇÄ=-1.5708+0.01, Œ∏max=0.1, name="Close to south pole"),
        (Œ±‚ÇÄ=0.0, Œ¥‚ÇÄ=0.0, Œ∏max=1e-6, name="Tiny disc"),
        (Œ±‚ÇÄ=0.0, Œ¥‚ÇÄ=0.0, Œ∏max=3.0, name="Large disc"),
        (Œ±‚ÇÄ=6.28318-1e-6, Œ¥‚ÇÄ=0.0, Œ∏max=0.1, name="Right at RA wrap"),
    ]
    
    all_passed = true
    
    for (i, test_case) in enumerate(edge_cases)
        @printf "Edge case %d: %s\n" i test_case.name
        
        fill!(map_test.pixels, 0.0)
        
        try
            XGPaint.profile_paint_generic!(map_test, workspace, model, 
                                         1e14, 0.5, test_case.Œ±‚ÇÄ, test_case.Œ¥‚ÇÄ, test_case.Œ∏max)
            
            nonzero_count = count(x -> x != 0, map_test.pixels)
            @printf "  Nonzero pixels: %d\n" nonzero_count
            @printf "  ‚úÖ PASSED (no errors)\n"
        catch e
            @printf "  ‚ùå FAILED with error: %s\n" e
            all_passed = false
        end
        
        @printf "\n"
    end
    
    return all_passed
end

"""
Performance comparison test
"""
function test_performance()
    @printf "Performance comparison...\n"
    
    nside = 256  # Larger map for meaningful timing
    res = Healpix.Resolution(nside)
    workspace = RingWorkspace(res)
    
    map_ringworkspace = HealpixMap{Float64, RingOrder}(zeros(Float64, nside2npix(nside)))
    map_bruteforce = HealpixMap{Float64, RingOrder}(zeros(Float64, nside2npix(nside)))
    
    model = TestModel(1.0)
    
    # Test case
    Œ±‚ÇÄ, Œ¥‚ÇÄ, Œ∏max = 1.5708, 0.7854, 0.1
    Mh, z = 1e14, 0.5
    
    # Warm up
    XGPaint.profile_paint_generic!(map_ringworkspace, workspace, model, Mh, z, Œ±‚ÇÄ, Œ¥‚ÇÄ, Œ∏max)
    profile_paint_bruteforce!(map_bruteforce, model, Mh, z, Œ±‚ÇÄ, Œ¥‚ÇÄ, Œ∏max)
    
    # Time RingWorkspace
    fill!(map_ringworkspace.pixels, 0.0)
    time_ringworkspace = @elapsed XGPaint.profile_paint_generic!(map_ringworkspace, workspace, model, Mh, z, Œ±‚ÇÄ, Œ¥‚ÇÄ, Œ∏max)
    
    # Time brute force
    fill!(map_bruteforce.pixels, 0.0)
    time_bruteforce = @elapsed profile_paint_bruteforce!(map_bruteforce, model, Mh, z, Œ±‚ÇÄ, Œ¥‚ÇÄ, Œ∏max)
    
    speedup = time_bruteforce / time_ringworkspace
    
    @printf "RingWorkspace time: %.6f seconds\n" time_ringworkspace
    @printf "Brute force time:   %.6f seconds\n" time_bruteforce
    @printf "Speedup:            %.1fx\n" speedup
    
    return speedup > 1.0  # Should be faster
end

"""
Run all tests
"""
function run_all_tests()
    @printf "%s\n" ("="^60)
    @printf "Testing XGPaint RingWorkspace Implementation\n"
    @printf "%s\n\n" ("="^60)
    
    test1_passed = test_ringworkspace_vs_bruteforce()
    @printf "\n%s\n\n" ("="^60)
    
    test2_passed = test_edge_cases()
    @printf "\n%s\n\n" ("="^60)
    
    test3_passed = test_performance()
    @printf "\n%s\n\n" ("="^60)
    
    if test1_passed && test2_passed && test3_passed
        @printf "üéâ ALL TESTS PASSED! üéâ\n"
        return true
    else
        @printf "‚ùå SOME TESTS FAILED\n"
        @printf "Correctness: %s\n" (test1_passed ? "‚úÖ" : "‚ùå")
        @printf "Edge cases:  %s\n" (test2_passed ? "‚úÖ" : "‚ùå") 
        @printf "Performance: %s\n" (test3_passed ? "‚úÖ" : "‚ùå")
        return false
    end
end

# Run the tests
if abspath(PROGRAM_FILE) == @__FILE__
    run_all_tests()
end
